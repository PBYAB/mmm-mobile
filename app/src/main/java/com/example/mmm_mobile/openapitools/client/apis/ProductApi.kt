/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.CreateProductRequest
import org.openapitools.client.models.PageProductToListDTO
import org.openapitools.client.models.ProductDTO

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ProductApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost:8080")
        }
    }

    /**
     * Create a new product
     * 
     * @param createProductRequest 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createProduct(createProductRequest: CreateProductRequest) : Unit = withContext(Dispatchers.IO) {
        val localVarResponse = createProductWithHttpInfo(createProductRequest = createProductRequest)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new product
     * 
     * @param createProductRequest 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun createProductWithHttpInfo(createProductRequest: CreateProductRequest) : ApiResponse<Unit?> = withContext(Dispatchers.IO) {
        val localVariableConfig = createProductRequestConfig(createProductRequest = createProductRequest)

        return@withContext request<CreateProductRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createProduct
     *
     * @param createProductRequest 
     * @return RequestConfig
     */
    fun createProductRequestConfig(createProductRequest: CreateProductRequest) : RequestConfig<CreateProductRequest> {
        val localVariableBody = createProductRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/products",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete a product
     * 
     * @param id 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteProduct(id: kotlin.Long) : Unit = withContext(Dispatchers.IO) {
        val localVarResponse = deleteProductWithHttpInfo(id = id)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete a product
     * 
     * @param id 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun deleteProductWithHttpInfo(id: kotlin.Long) : ApiResponse<Unit?> = withContext(Dispatchers.IO) {
        val localVariableConfig = deleteProductRequestConfig(id = id)

        return@withContext request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteProduct
     *
     * @param id 
     * @return RequestConfig
     */
    fun deleteProductRequestConfig(id: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v1/products/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get a product by ID
     * 
     * @param id 
     * @return ProductDTO
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getProduct(id: kotlin.Long) : ProductDTO = withContext(Dispatchers.IO) {
        val localVarResponse = getProductWithHttpInfo(id = id)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProductDTO
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get a product by ID
     * 
     * @param id 
     * @return ApiResponse<ProductDTO?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getProductWithHttpInfo(id: kotlin.Long) : ApiResponse<ProductDTO?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getProductRequestConfig(id = id)

        return@withContext request<Unit, ProductDTO>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getProduct
     *
     * @param id 
     * @return RequestConfig
     */
    fun getProductRequestConfig(id: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/products/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get a product by barcode
     * 
     * @param barcode 
     * @return ProductDTO
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getProductByBarcode(barcode: kotlin.String) : ProductDTO = withContext(Dispatchers.IO) {
        val localVarResponse = getProductByBarcodeWithHttpInfo(barcode = barcode)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProductDTO
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get a product by barcode
     * 
     * @param barcode 
     * @return ApiResponse<ProductDTO?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getProductByBarcodeWithHttpInfo(barcode: kotlin.String) : ApiResponse<ProductDTO?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getProductByBarcodeRequestConfig(barcode = barcode)

        return@withContext request<Unit, ProductDTO>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getProductByBarcode
     *
     * @param barcode 
     * @return RequestConfig
     */
    fun getProductByBarcodeRequestConfig(barcode: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/products/barcode/{barcode}".replace("{"+"barcode"+"}", encodeURIComponent(barcode.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get all products
     * 
     * @param name  (optional)
     * @param quantity  (optional)
     * @param nutriScore  (optional)
     * @param novaGroups  (optional)
     * @param category  (optional)
     * @param allergens  (optional)
     * @param country  (optional)
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 10)
     * @param sortBy  (optional, default to "id")
     * @param sortDirection  (optional, default to "ASC")
     * @return PageProductToListDTO
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getProducts(name: kotlin.String? = null, quantity: kotlin.String? = null, nutriScore: kotlin.collections.List<kotlin.Int>? = null, novaGroups: kotlin.collections.List<kotlin.Int>? = null, category: kotlin.collections.List<kotlin.Long>? = null, allergens: kotlin.collections.List<kotlin.Long>? = null, country: kotlin.collections.List<kotlin.Long>? = null, page: kotlin.Int? = 0, size: kotlin.Int? = 10, sortBy: kotlin.String? = "id", sortDirection: kotlin.String? = "ASC") : PageProductToListDTO = withContext(Dispatchers.IO) {
        val localVarResponse = getProductsWithHttpInfo(name = name, quantity = quantity, nutriScore = nutriScore, novaGroups = novaGroups, category = category, allergens = allergens, country = country, page = page, size = size, sortBy = sortBy, sortDirection = sortDirection)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PageProductToListDTO
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get all products
     * 
     * @param name  (optional)
     * @param quantity  (optional)
     * @param nutriScore  (optional)
     * @param novaGroups  (optional)
     * @param category  (optional)
     * @param allergens  (optional)
     * @param country  (optional)
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 10)
     * @param sortBy  (optional, default to "id")
     * @param sortDirection  (optional, default to "ASC")
     * @return ApiResponse<PageProductToListDTO?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getProductsWithHttpInfo(name: kotlin.String?, quantity: kotlin.String?, nutriScore: kotlin.collections.List<kotlin.Int>?, novaGroups: kotlin.collections.List<kotlin.Int>?, category: kotlin.collections.List<kotlin.Long>?, allergens: kotlin.collections.List<kotlin.Long>?, country: kotlin.collections.List<kotlin.Long>?, page: kotlin.Int?, size: kotlin.Int?, sortBy: kotlin.String?, sortDirection: kotlin.String?) : ApiResponse<PageProductToListDTO?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getProductsRequestConfig(name = name, quantity = quantity, nutriScore = nutriScore, novaGroups = novaGroups, category = category, allergens = allergens, country = country, page = page, size = size, sortBy = sortBy, sortDirection = sortDirection)

        return@withContext request<Unit, PageProductToListDTO>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getProducts
     *
     * @param name  (optional)
     * @param quantity  (optional)
     * @param nutriScore  (optional)
     * @param novaGroups  (optional)
     * @param category  (optional)
     * @param allergens  (optional)
     * @param country  (optional)
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 10)
     * @param sortBy  (optional, default to "id")
     * @param sortDirection  (optional, default to "ASC")
     * @return RequestConfig
     */
    fun getProductsRequestConfig(name: kotlin.String?, quantity: kotlin.String?, nutriScore: kotlin.collections.List<kotlin.Int>?, novaGroups: kotlin.collections.List<kotlin.Int>?, category: kotlin.collections.List<kotlin.Long>?, allergens: kotlin.collections.List<kotlin.Long>?, country: kotlin.collections.List<kotlin.Long>?, page: kotlin.Int?, size: kotlin.Int?, sortBy: kotlin.String?, sortDirection: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (name != null) {
                    put("name", listOf(name.toString()))
                }
                if (quantity != null) {
                    put("quantity", listOf(quantity.toString()))
                }
                if (nutriScore != null) {
                    put("nutriScore", toMultiValue(nutriScore.toList(), "multi"))
                }
                if (novaGroups != null) {
                    put("novaGroups", toMultiValue(novaGroups.toList(), "multi"))
                }
                if (category != null) {
                    put("category", toMultiValue(category.toList(), "multi"))
                }
                if (allergens != null) {
                    put("allergens", toMultiValue(allergens.toList(), "multi"))
                }
                if (country != null) {
                    put("country", toMultiValue(country.toList(), "multi"))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
                if (sortBy != null) {
                    put("sortBy", listOf(sortBy.toString()))
                }
                if (sortDirection != null) {
                    put("sortDirection", listOf(sortDirection.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/products",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update a product
     * 
     * @param id 
     * @param createProductRequest 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun updateProduct(id: kotlin.Long, createProductRequest: CreateProductRequest) : Unit = withContext(Dispatchers.IO) {
        val localVarResponse = updateProductWithHttpInfo(id = id, createProductRequest = createProductRequest)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update a product
     * 
     * @param id 
     * @param createProductRequest 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun updateProductWithHttpInfo(id: kotlin.Long, createProductRequest: CreateProductRequest) : ApiResponse<Unit?> = withContext(Dispatchers.IO) {
        val localVariableConfig = updateProductRequestConfig(id = id, createProductRequest = createProductRequest)

        return@withContext request<CreateProductRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateProduct
     *
     * @param id 
     * @param createProductRequest 
     * @return RequestConfig
     */
    fun updateProductRequestConfig(id: kotlin.Long, createProductRequest: CreateProductRequest) : RequestConfig<CreateProductRequest> {
        val localVariableBody = createProductRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v1/products/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
