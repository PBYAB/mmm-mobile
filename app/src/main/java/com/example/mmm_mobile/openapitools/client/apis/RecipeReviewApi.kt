/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.CanUserCreateReviewDTO
import org.openapitools.client.models.CreateRecipeReviewRequest
import org.openapitools.client.models.PageRecipeReviewDTO
import org.openapitools.client.models.RecipeReviewDTO

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class RecipeReviewApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost:8080")
        }
    }

    /**
     * Add review to recipe
     * 
     * @param recipeId 
     * @param createRecipeReviewRequest 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun addReview(recipeId: kotlin.Long, createRecipeReviewRequest: CreateRecipeReviewRequest) : Unit = withContext(Dispatchers.IO) {
        val localVarResponse = addReviewWithHttpInfo(recipeId = recipeId, createRecipeReviewRequest = createRecipeReviewRequest)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Add review to recipe
     * 
     * @param recipeId 
     * @param createRecipeReviewRequest 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun addReviewWithHttpInfo(recipeId: kotlin.Long, createRecipeReviewRequest: CreateRecipeReviewRequest) : ApiResponse<Unit?> = withContext(Dispatchers.IO) {
        val localVariableConfig = addReviewRequestConfig(recipeId = recipeId, createRecipeReviewRequest = createRecipeReviewRequest)

        return@withContext request<CreateRecipeReviewRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation addReview
     *
     * @param recipeId 
     * @param createRecipeReviewRequest 
     * @return RequestConfig
     */
    fun addReviewRequestConfig(recipeId: kotlin.Long, createRecipeReviewRequest: CreateRecipeReviewRequest) : RequestConfig<CreateRecipeReviewRequest> {
        val localVariableBody = createRecipeReviewRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/recipes/{recipeId}/reviews".replace("{"+"recipeId"+"}", encodeURIComponent(recipeId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param recipeId 
     * @return CanUserCreateReviewDTO
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun checkIfUserReviewed(recipeId: kotlin.Long) : CanUserCreateReviewDTO = withContext(Dispatchers.IO) {
        val localVarResponse = checkIfUserReviewedWithHttpInfo(recipeId = recipeId)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CanUserCreateReviewDTO
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param recipeId 
     * @return ApiResponse<CanUserCreateReviewDTO?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun checkIfUserReviewedWithHttpInfo(recipeId: kotlin.Long) : ApiResponse<CanUserCreateReviewDTO?> = withContext(Dispatchers.IO) {
        val localVariableConfig = checkIfUserReviewedRequestConfig(recipeId = recipeId)

        return@withContext request<Unit, CanUserCreateReviewDTO>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation checkIfUserReviewed
     *
     * @param recipeId 
     * @return RequestConfig
     */
    fun checkIfUserReviewedRequestConfig(recipeId: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/recipes/{recipeId}/reviews/can-review".replace("{"+"recipeId"+"}", encodeURIComponent(recipeId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete review
     * 
     * @param recipeId 
     * @param reviewId 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteReview(recipeId: kotlin.Long, reviewId: kotlin.Long) : Unit = withContext(Dispatchers.IO) {
        val localVarResponse = deleteReviewWithHttpInfo(recipeId = recipeId, reviewId = reviewId)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete review
     * 
     * @param recipeId 
     * @param reviewId 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun deleteReviewWithHttpInfo(recipeId: kotlin.Long, reviewId: kotlin.Long) : ApiResponse<Unit?> = withContext(Dispatchers.IO) {
        val localVariableConfig = deleteReviewRequestConfig(recipeId = recipeId, reviewId = reviewId)

        return@withContext request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteReview
     *
     * @param recipeId 
     * @param reviewId 
     * @return RequestConfig
     */
    fun deleteReviewRequestConfig(recipeId: kotlin.Long, reviewId: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v1/recipes/{recipeId}/reviews/{reviewId}".replace("{"+"recipeId"+"}", encodeURIComponent(recipeId.toString())).replace("{"+"reviewId"+"}", encodeURIComponent(reviewId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get review
     * 
     * @param recipeId 
     * @param reviewId 
     * @return RecipeReviewDTO
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getReview(recipeId: kotlin.Long, reviewId: kotlin.Long) : RecipeReviewDTO = withContext(Dispatchers.IO) {
        val localVarResponse = getReviewWithHttpInfo(recipeId = recipeId, reviewId = reviewId)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RecipeReviewDTO
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get review
     * 
     * @param recipeId 
     * @param reviewId 
     * @return ApiResponse<RecipeReviewDTO?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getReviewWithHttpInfo(recipeId: kotlin.Long, reviewId: kotlin.Long) : ApiResponse<RecipeReviewDTO?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getReviewRequestConfig(recipeId = recipeId, reviewId = reviewId)

        return@withContext request<Unit, RecipeReviewDTO>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getReview
     *
     * @param recipeId 
     * @param reviewId 
     * @return RequestConfig
     */
    fun getReviewRequestConfig(recipeId: kotlin.Long, reviewId: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/recipes/{recipeId}/reviews/{reviewId}".replace("{"+"recipeId"+"}", encodeURIComponent(recipeId.toString())).replace("{"+"reviewId"+"}", encodeURIComponent(reviewId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get all reviews for recipe
     * 
     * @param id 
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 10)
     * @param sortBy  (optional, default to "id")
     * @param sortDirection  (optional, default to "ASC")
     * @return PageRecipeReviewDTO
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getReviews(id: kotlin.Long, page: kotlin.Int? = 0, size: kotlin.Int? = 10, sortBy: kotlin.String? = "id", sortDirection: kotlin.String? = "ASC") : PageRecipeReviewDTO = withContext(Dispatchers.IO) {
        val localVarResponse = getReviewsWithHttpInfo(id = id, page = page, size = size, sortBy = sortBy, sortDirection = sortDirection)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PageRecipeReviewDTO
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get all reviews for recipe
     * 
     * @param id 
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 10)
     * @param sortBy  (optional, default to "id")
     * @param sortDirection  (optional, default to "ASC")
     * @return ApiResponse<PageRecipeReviewDTO?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getReviewsWithHttpInfo(id: kotlin.Long, page: kotlin.Int?, size: kotlin.Int?, sortBy: kotlin.String?, sortDirection: kotlin.String?) : ApiResponse<PageRecipeReviewDTO?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getReviewsRequestConfig(id = id, page = page, size = size, sortBy = sortBy, sortDirection = sortDirection)

        return@withContext request<Unit, PageRecipeReviewDTO>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getReviews
     *
     * @param id 
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 10)
     * @param sortBy  (optional, default to "id")
     * @param sortDirection  (optional, default to "ASC")
     * @return RequestConfig
     */
    fun getReviewsRequestConfig(id: kotlin.Long, page: kotlin.Int?, size: kotlin.Int?, sortBy: kotlin.String?, sortDirection: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
                if (sortBy != null) {
                    put("sortBy", listOf(sortBy.toString()))
                }
                if (sortDirection != null) {
                    put("sortDirection", listOf(sortDirection.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/recipes/{id}/reviews".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update review
     * 
     * @param recipeId 
     * @param reviewId 
     * @param createRecipeReviewRequest 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun updateReview(recipeId: kotlin.Long, reviewId: kotlin.Long, createRecipeReviewRequest: CreateRecipeReviewRequest) : Unit = withContext(Dispatchers.IO) {
        val localVarResponse = updateReviewWithHttpInfo(recipeId = recipeId, reviewId = reviewId, createRecipeReviewRequest = createRecipeReviewRequest)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update review
     * 
     * @param recipeId 
     * @param reviewId 
     * @param createRecipeReviewRequest 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun updateReviewWithHttpInfo(recipeId: kotlin.Long, reviewId: kotlin.Long, createRecipeReviewRequest: CreateRecipeReviewRequest) : ApiResponse<Unit?> = withContext(Dispatchers.IO) {
        val localVariableConfig = updateReviewRequestConfig(recipeId = recipeId, reviewId = reviewId, createRecipeReviewRequest = createRecipeReviewRequest)

        return@withContext request<CreateRecipeReviewRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateReview
     *
     * @param recipeId 
     * @param reviewId 
     * @param createRecipeReviewRequest 
     * @return RequestConfig
     */
    fun updateReviewRequestConfig(recipeId: kotlin.Long, reviewId: kotlin.Long, createRecipeReviewRequest: CreateRecipeReviewRequest) : RequestConfig<CreateRecipeReviewRequest> {
        val localVariableBody = createRecipeReviewRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v1/recipes/{recipeId}/reviews/{reviewId}".replace("{"+"recipeId"+"}", encodeURIComponent(recipeId.toString())).replace("{"+"reviewId"+"}", encodeURIComponent(reviewId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
